using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CSharpSolutions.Tools;

namespace CSharpSolutions.Problems
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    /// The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    /// 1: 1
    /// 3: 1,3
    /// 6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// Solution: 76576500
    /// </summary>
    class Problem12
    {
        private static int Multiplicity(long n, IEnumerable<long> factors)
        {
            return factors.Where(f => f == n).Count();
        }

        public static int Solve()
        {
            var n = 1;
            var tri = 0;

            while(true)
            {
                tri += n;
                var factors = Factor.Primes(tri);
                var distinctFactors = factors.Distinct();
                var multiplicities = distinctFactors.Select(fac => Multiplicity(fac, factors));
                //the number of divisors is the product of 1 more than the multiplicity of all prime factors
                var numDivisors = multiplicities.Aggregate(1L, (acc, m) => acc * (m + 1));
                if (numDivisors > 500)
                    return tri;
                n++;
            }
        }
    }
}
