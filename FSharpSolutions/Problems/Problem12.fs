module Problem12
(*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
Solution: 76576500
*)

//the number of divisors is the product of 1 plus the multiplicities of the prime divisors
open Factorization

let solution = 
    let triangle n = 
        [1..n] |> List.reduce (+)

    let mutable primes = [2]
    let mutable maxPrimeFound = 2

    let setPrimes value = 
        primes <- NumericSequences.primes (value * 4) |> Seq.toList
        maxPrimeFound <- primes |> List.rev |> List.head
        //printf "%i\n" value

    let numDivisors tri = 
        if maxPrimeFound <= tri/2 then setPrimes tri
        primes
        |> List.takeWhile (fun p -> p <= tri/2)
        |> List.filter (fun p -> tri % p = 0)
        |> List.map (fun x -> if x < tri/2 then (multiplicity tri x) + 1 else 1) 
        |> List.reduce (*) 

    let triangles = Seq.initInfinite (fun index -> triangle (index + 4))
    triangles |> Seq.find (fun x -> numDivisors x >= 500)


       
   